name: CI

on: [push, pull_request, workflow_dispatch]

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    env:
      PYTHONPATH: .
      # point the app to the CI postgres service
      POSTGRES_SERVER: localhost
      POSTGRES_PORT: "5432"
      POSTGRES_DB: app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # pick one depending on your app driver (most templates use psycopg or asyncpg)
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/app
      # If your code expects async URL, add this too:
      DATABASE_ASYNC_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/app

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d app"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python (use a stable version)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Create venv and upgrade tooling
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip setuptools wheel

      # IMPORTANT: Don't run "pip install -e ."
      # Install only the runtime/test deps needed for the app and tests.
      - name: Install runtime + test dependencies (no editable install)
        run: |
          . .venv/bin/activate
          # ensure correct JWT lib; remove wrong "jwt" if present
          pip uninstall -y jwt || true
          pip install \
            fastapi \
            "pydantic>=2,<3" \
            pydantic-settings \
            sqlmodel \
            "sqlalchemy>=2" \
            "uvicorn[standard]" \
            httpx \
            aiosqlite \
            PyJWT \
            passlib bcrypt \
            python-multipart \
            email-validator \
            sentry-sdk \
            "psycopg[binary]" \
            emails \
            jinja2 \
            pytest pytest-cov

      - name: Make report directories
        run: mkdir -p reports/htmlcov reports/junit

        # Add this step BEFORE "Run tests"
      - name: Bootstrap DB schema (create tables)
        run: |
          . .venv/bin/activate
          python - <<'PY'
          import asyncio
          import os
          # ensure CI uses Postgres service URL
          print("DB URL:", os.getenv("DATABASE_URL"))
          try:
            # Try async engine first (most modern templates)
            from app.db.session import async_engine as engine
            from app.db.base import SQLModel
            async def _create_all():
              async with engine.begin() as conn:
                await conn.run_sync(SQLModel.metadata.create_all)
            asyncio.run(_create_all())
            print("✅ Created tables with async engine")
          except Exception as e1:
            print("Async create_all failed, trying sync:", e1)
            try:
              # Fallback to sync engine
              from app.db.session import engine
              from app.db.base import SQLModel
              SQLModel.metadata.create_all(engine)
              print("✅ Created tables with sync engine")
            except Exception as e2:
              print("❌ Could not create tables:", e2)
              raise
          PY

      - name: Run tests
        run: |
          . .venv/bin/activate
          pytest -q --maxfail=1 \
            --cov=app \
            --cov-report=term-missing:skip-covered \
            --cov-report=html:reports/htmlcov \
            --junitxml=reports/junit/junit.xml

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/reports/htmlcov

      - name: Upload JUnit XML
        uses: actions/upload-artifact@v4
        with:
          name: backend-junit
          path: backend/reports/junit/junit.xml
